DevChallenge ­ SRE

You have just joined a shiny new start-up that doesn’t have any prior DevOps experience. They have deployed a bunch of microservices in the cloud but don’t have monitoring or any way of determining how many instances are running. In an attempt to organise your deployments you decide to write a command line tool that will query Cloud Provider X (CPX).

Challenge:

The tool should have multiple commands. Depending on which command is run, it should:

1. Print running services to stdout (similar to the table below) 

2. Print out average CPU/Memory of services of the same type 

3. Flag services which have fewer than 2 healthy instances running 

4. Have the ability to track and print CPU/Memory of all instances of a given service over
time (until the command is stopped, e.g. ctrl + c).

For example, (1) should print out something like:

IP         Service             Status        CPU  Memory 
--------------------------------------------------------
10.58.1.1  PermissionsService  Healthy        28%  32% 
10.58.1.2  AuthService         Healthy        14%  10% 
10.58.1.3  MLService           Healthy         9%   5% 
10.58.1.4  StorageService      Unhealthy      95%  85% 
10.58.1.3  MLService           Healthy        35%  55% 

(But feel free to be creative!)

Assumptions:

1. CPX offers an API for fetching all running servers. 

2. The same service also allows you to query a given IP for simple statistics.

You should have been provided with a simple Python server which two endpoints. You can run it as follows:

./cpx_server.py <port­ to ­serve ­on>

$curl localhost:<port>/servers
["10.58.1.121","10.58.1.120","10.58.1.123","10.58.1.122",...]

$curl localhost:<port>/10.58.1.121
{"cpu":"61%","service":"UserService","memory":"4%"}


Deliverables:

1. The complete source code for a simple program written in either Python, Go or Java. 

2. You should include a README.md file discussing some of the choices you’ve made, trade-offs and future improvements. 

3. Documentation on how to build and/or run your program. 

4. Feel free to use open source third party libraries. However, you should not assume that these libraries will be globally installed on the system; you should provide instructions on how to fetch them in the README.md (e.g. via go get, pip, maven or similar). 

5. Tests where deemed necessary, mocking where appropriate. 
